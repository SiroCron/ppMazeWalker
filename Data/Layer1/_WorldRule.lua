-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      初期化
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

-- require(),loadfile()でも可だが、構文エラー時のログがアバウト
cm = import("Lib/LayerX_RuleCommon.lua")

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      ルール説明
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

_G.rule_info = cm.rule_info

rule_info._0_Title = "Layer1 - アイテムを使う"

rule_info._1_Description = {
    "出口に到着するとステージクリア",
    "ステージによっては行動回数制限あり",
    "鍵を使わないと出られない出口がある",
    "宝玉がセットされていない台座があると出口の錠を開けられない",
    "敵と重なる(同じマスに入る)とアウト",
    "銃の射程は2歩分先まで. 壁や敵を貫通しない. 弾数制限無し",
}

rule_info._2_MapCharacter = {
    "'#' = 壁           'D' = 出口",
    "'.' = 通路         '$' = 出口(施錠)",
    "'k' = Key(鍵)      'l' = 台座",
    "'o' = Orb(宝玉)    'i' = 台座(宝玉)",
    "'g' = Gun(銃)",
    "",
    "'0'~'9' = 敵",
    "",
    "-------- Walker視点のみ --------",
    "'@' = 自分         '!' = 何かある？",
    "                   '?' = 不明",
}

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      ホストから参照するプロパティ
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

_G.rule = cm.rule

rule.name = "Layer1"

-- ==============================================
-- コントロール
-- (デフォルト)

-- ==============================================
-- マップ変換
--
-- MazeMap=>WalkerMap変換テーブル
-- 変換前の"?"はエリア外またはエラー
rule.mapchip.convert_table = {
    " @Oo?X", -- 先頭(idx:1)はWalkerViewの文字
    -- 1文字目がstage.maze.mapの文字,2文字以降がWalkerViewに対応する文字
    "??????", -- エリア外(配列外)
    "  ????", -- エリア外(空欄)
    "#####?", -- 壁
    ".....?", -- 通路
    "DDDD!?", -- 扉
    "$$$D!?", -- 扉  :施錠状態は分からない
    "llll!?", -- 台座
    "iiil!?", -- 台座:宝玉の有無は分からない
    "kkk!!?", -- 鍵
    "ooo!!?", -- 宝玉
    "ggg!!?", -- 銃
    "0000!?", -- 敵
    "1110!?", -- 敵
    "2220!?", -- 敵
    "3330!?", -- 敵
    "4440!?", -- 敵
    "5550!?", -- 敵
    "6660!?", -- 敵
    "7770!?", -- 敵
    "8880!?", -- 敵
    "9990!?", -- 敵
}

-- ==============================================
-- アイテム
rule.item_table = {
    -- mapchip : ユニークであること,1文字
    -- pickup  : 拾得後のmazemapのmapchip,1文字
    -- usable  : 使用できるmazemapのmapchip,該当文字全て
    Key = { mapchip = "k", pickup = ".", usable = "$" },
    Orb = { mapchip = "o", pickup = ".", usable = "l" },
    Gun = { mapchip = "g", pickup = ".", usable = ".$liko" },
}

-- ==============================================
-- Walker情報
--
-- ・クエスト開始時に_G.walkerテーブルを初期化するための設定
--
rule.walker_src.enterable_mapchip = "!.D$likog0123456789"
rule.walker_src.view = {
    "???ooo???",
    "??ooooo??",
    "?ooOOOoo?",
    "oooOOOooo",
    "ooOOOOOoo",
    "ooOOOOOoo",
    "ooOO@OOoo",
    "ooooooooo",
    "?ooooooo?",
}

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      ホストからCallされる関数(必須)
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

-- ============================================================================
-- クエスト開始前の初期化
--
-- 戻り値 : true .... 正常終了,クエスト開始処理へ進む
--          false ... 異常終了,クエストを中断する
--
rule.QuestInit = cm.QuestInit

-- ============================================================================
-- クエスト開始処理
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : true .... 正常終了,ラウンド処理へ進む
--          false ... 異常終了,クエストを中断する
--
rule.QuestStart = cm.QuestStart

-- ============================================================================
-- Walker行動直前の処理
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : true .... 正常終了,次のラウンドへ処理を進める
--          false ... 異常終了,クエストを中断する
--
rule.RoundSetup = cm.RoundSetup

-- ============================================================================
-- クエストクリア/失敗判定
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : <is_success(bool)>, <next(string)>
--      is_success : 処理が問題無く終了したか？
--          true .... 正常終了,次のラウンドまたはクエストクリア/失敗
--          false ... 異常終了,クエストを中断する
--      next : 次の状態(is_successがtrueの時に有効)
--          "continue" .. フェーズ維持,現在の処理を継続する
--          "next" ...... クエスト継続,次のラウンド(Setup)に進む
--          "clear" ..... クエストクリア
--          "failure" ... クエスト失敗
--
rule.RoundJudge = cm.RoundJudge

-- ============================================================================
-- 行動を処理する
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : true .... 正常終了,次のラウンドへ処理を進める
--          false ... 異常終了,クエストを中断する
--
rule.RoundAction = cm.RoundAction

-- ============================================================================
-- 次のラウンドへの更新or変化処理
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : true .... 正常終了,次のラウンドへ処理を進める
--          false ... 異常終了,クエストを中断する
--
rule.RoundNext = cm.RoundNext

-- ============================================================================
-- クエスト中断処理
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : true .... 正常終了,ラウンド処理へ進む
--          false ... 異常終了,クエストを中断する
--
rule.QuestStop = cm.QuestStop

-- ============================================================================
-- クエストクリア処理
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : true .... 正常終了
--          false ... 異常終了
--
rule.QuestClear = cm.QuestClear

-- ============================================================================
-- クエスト失敗処理
--
-- _si : 処理情報
--      _si.count : フェーズ移行後何度目の呼び出しか(0スタート)
--      _si.delta_time : 更新間隔(sec,float)
--
-- 戻り値 : true .... 正常終了
--          false ... 異常終了
--
rule.QuestFailure = cm.QuestFailure

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      内部関数
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      定義済み関数を必要とする初期化
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

local Init = function()
end

Init()
