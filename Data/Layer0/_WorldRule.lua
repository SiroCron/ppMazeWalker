-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      初期化
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

-- require(),loadfile()でも可だが、構文エラー時のログがアバウト
cm = import("Lib/LayerX_RuleCommon.lua")

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      ルール説明
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

_G.rule_info = cm.rule_info

rule_info._0_Title = "Layer0 - 「左手法」で移動するWalkerを組む"

rule_info._1_Description = {
    "出口に到着するとステージクリア",
    "ステージによっては行動回数制限あり",
}

rule_info._2_MapCharacter = {
    "'#' = 壁           'D' = 出口",
    "'.' = 通路",
    "",
    "-------- Walker視点のみ --------",
    "'@' = 自分         '!' = 何かある？",
    "                   '?' = 不明",
}

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      ホストから参照するプロパティ
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

_G.rule = cm.rule

rule.name = "Layer0"

-- ==============================================
-- コントロール
-- (デフォルト)

-- ==============================================
-- マップ変換
--
-- MazeMap=>WalkerMap変換テーブル
-- 変換前の"?"はエリア外またはエラー
rule.mapchip.convert_table = {
    " @Oo?X", -- 先頭(idx:1)はWalkerViewの文字
    -- 1文字目がstage.maze.mapの文字,2文字以降がWalkerViewに対応する文字
    "??????", -- エリア外(配列外)
    "  ????", -- エリア外(空欄)
    "#####?", -- 壁
    ".....?", -- 通路
    "DDDD!?", -- 扉
}

-- ==============================================
-- アイテム
rule.item_table = {}

-- ==============================================
-- Walker情報
rule.walker_src.enterable_mapchip = "!.D"
rule.walker_src.view = {
    "OOO",
    "OOO",
    "O@O",
    "ooo",
}

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      ホストからCallされる関数(必須)
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

-- ============================================================================
-- クエスト開始前の初期化
--
-- 戻り値 : true .... 正常終了,クエスト開始処理へ進む
--          false ... 異常終了,クエストを中断する
--
rule.QuestInit = cm.QuestInit

-- ============================================================================
-- クエスト開始処理
--
-- 戻り値 : true .... 正常終了,ラウンド処理へ進む
--          false ... 異常終了,クエストを中断する
--
rule.QuestStart = cm.QuestStart

-- ============================================================================
-- Walker行動直前の処理
--
-- 戻り値 : true .... 正常終了,次のラウンドへ処理を進める
--          false ... 異常終了,クエストを中断する
--
rule.RoundSetup = cm.RoundSetup

-- ============================================================================
-- クエストクリア/失敗判定
--
-- 戻り値 : true .... 正常終了,次のラウンドへ処理を進める
--          false ... 異常終了,クエストを中断する
--
rule.RoundJudge = cm.RoundJudge

-- ============================================================================
-- 行動を処理する
--
-- _action : Walkerの行動
-- _object : _action=="UseItem"時の使用アイテム名, 他の行動時は nil
--
-- 戻り値 : true .... 正常終了,次のラウンドへ処理を進める
--          false ... 異常終了,クエストを中断する
--
rule.RoundAction = cm.RoundAction

-- ============================================================================
-- 次のラウンドへの更新or変化処理
--
-- 戻り値 : true .... 正常終了,次のラウンドへ処理を進める
--          false ... 異常終了,クエストを中断する
--
rule.RoundNext = cm.RoundNext

-- ============================================================================
-- クエスト中断処理
--
-- 戻り値 : true .... 正常終了,ラウンド処理へ進む
--          false ... 異常終了,クエストを中断する
--
rule.QuestStop = cm.QuestStop

-- ============================================================================
-- クエストクリア処理
--
-- 戻り値 : true .... 正常終了
--          false ... 異常終了
--
rule.QuestClear = cm.QuestClear

-- ============================================================================
-- クエスト失敗処理
--
-- 戻り値 : true .... 正常終了
--          false ... 異常終了
--
rule.QuestFailure = cm.QuestFailure

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      内部関数
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

-- ////////////////////////////////////////////////////////////////////////////
-- ///
-- //
-- /
--      定義済み関数を必要とする初期化
--                                                                            /
--                                                                           //
--                                                                          ///
-- ////////////////////////////////////////////////////////////////////////////

local Init = function()
end

Init()
